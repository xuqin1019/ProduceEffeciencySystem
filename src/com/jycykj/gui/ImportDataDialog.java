/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jycykj.gui;

import com.jycykj.helper.ConfigurePropertyEditor;
import com.jycykj.helper.ImageIconUtil;
import com.jycykj.helper.Util;
import com.jycykj.managers.ProduceCardManager;
import com.jycykj.model.Component;
import com.jycykj.model.Procedure;
import com.jycykj.model.ProducedProcedure;
import com.jycykj.model.Worker;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
/**
 *
 * @author xuqin
 */
public class ImportDataDialog extends javax.swing.JDialog {
    private static final String importRootPath = "produceCardImportPath";       //文件选择器的根目录
    private File importFile=null;
    private volatile int currentLine=0;
    /**
     * Creates new form ImportDataDialog
     */
    public ImportDataDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setIconImage(ImageIconUtil.getFrameIcon("pics/import.png"));
        this.setFont(new java.awt.Font("宋体", 0, 14));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileNameTextField = new javax.swing.JTextField();
        selectButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("选择文件");

        fileNameTextField.setEditable(false);
        fileNameTextField.setPreferredSize(new java.awt.Dimension(25, 21));

        selectButton.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        selectButton.setText("选择");
        selectButton.setIcon(ImageIconUtil.getIcon("pics/select.png"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        importButton.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        importButton.setText("导入");
        importButton.setIcon(ImageIconUtil.getIcon("pics/import_file.png"));
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        progressBar.setStringPainted(true);
        progressBar.setBackground(Color.BLUE);
        progressBar.setForeground(new java.awt.Color(255, 51, 102));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(importButton))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectButton)
                    .addComponent(importButton)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser = new JFileChooser(ConfigurePropertyEditor.get(importRootPath));
        jFileChooser.setAcceptAllFileFilterUsed(false);
        ExportFileFilter excelFilter = new ExportFileFilter(".xls", "excel 文件 (*.xls)");  //读取配置文件
        jFileChooser.addChoosableFileFilter(excelFilter);
   
        int rVal = jFileChooser.showSaveDialog(this);
        if(rVal == JFileChooser.APPROVE_OPTION) {
            importFile = jFileChooser.getSelectedFile();
            fileNameTextField.setText(importFile.getAbsolutePath());
            ConfigurePropertyEditor.set(importRootPath,importFile.getParent());     //写回配置文件
        }
        if(rVal == JFileChooser.CANCEL_OPTION) {
            System.out.println("cancel");
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        // TODO add your handling code here:
        if(importFile==null) {
             Util.showMessageDialog(this, "请先选择文件");
             return;
         }
         Workbook rwb = null;
         try {
             
            //计算出需要处理的文件行数
            rwb = Workbook.getWorkbook(new FileInputStream(importFile));
            Sheet rSheet = rwb.getSheet(0);
            int lineNum = rSheet.getRows()-1;
            rwb.close();
            
            //设置进度条的参数
            progressBar.setMinimum(0);
            progressBar.setMaximum(lineNum);
            
            //开启进度条线程
            Timer timer = new Timer(30 , new ActionListener() { 
                public void actionPerformed(ActionEvent e) {  
                    progressBar.setValue(currentLine);  
                }  
            });  
            timer.start();  
            
            //开启任务线程
            new Thread(new ExcelFileHander()).start();
           
        } catch (Exception ex) {
            Logger.getLogger(ImportDataDialog.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if(rwb!=null) {
                rwb.close();
            }
        }
    }//GEN-LAST:event_importButtonActionPerformed
    
    class ExcelFileHander implements  Runnable {
        private ProduceCardManager produceCardManager;
        private Map<Integer,String> errorLog=null;    //记录错误的日志(行号---->具体错误信息)
        
        public ExcelFileHander() {
            produceCardManager = ProduceCardManager.newInstance();
            errorLog = new HashMap<Integer,String>();
        }
        
        @Override
        public void run() {
             //-----------------------------导入文件日志-------------------------------
            LoginWindow.logger.info("开始导入文件 : " + importFile.getAbsolutePath());
            //-----------------------------导入文件日志-------------------------------
            
            currentLine=0;
            int successNum=0;    //导入成功条数
            Workbook rwb = null;
            if(importFile.exists()) {
                try {
                    rwb = Workbook.getWorkbook(new FileInputStream(importFile));
                    Sheet rSheet = rwb.getSheet(0);
                    int rowNum = rSheet.getRows();
                    if(rowNum<=1) {   //只有标题行
                        return;
                    }
                    
                    //处理每一行
                    for(int i=1;i<rowNum;++i) {
                        ProducedProcedure producedProcedure = new ProducedProcedure();
                        Component component = new Component();
                        Procedure procedure = new Procedure();
                        Worker worker = new Worker();
                        Cell [] columns = rSheet.getRow(i);
                        for(int j=0;j<columns.length;++j) {
                            String title = rSheet.getCell(j,0).getContents();
                            String content = columns[j].getContents().trim();
                            if(title.equals("图号")) {
                                component.setComponentId(content);      //设置零件的图号
                            } else if(title.equals("批次号")) {      //批次号
                                component.setBatchName(content);
                            } else if(title.equals("工序")) {
                                procedure.setProcedureName(content);
                            } else if(title.equals("操作工")) {
                                worker.setWorkerName(content);
                            } else if(title.equals("合格数")) {
                                producedProcedure.setPassedNum(Integer.parseInt(content));
                            } else if(title.equals("报废数")) {
                                producedProcedure.setFailedNum(Integer.parseInt(content));
                            } else if(title.equals("日期")) {
                                producedProcedure.setDate(Util.parseDateString(content));
                            }
                            producedProcedure.setComponent(component);
                            producedProcedure.setProcedure(procedure);
                            producedProcedure.setOperator(worker);
                        }
                        
                        if(produceCardManager.putProducedProcedure(producedProcedure)) {   //成功写入数据库
                            
                            //-----------------------------导入记录日志-------------------------------
                            LoginWindow.logger.info("导入记录成功 : " + producedProcedure.toString());
                            //-----------------------------导入记录日志-------------------------------
                            successNum++;
                            
                        } else {
                            errorLog.put(currentLine+2,produceCardManager.getErrorMessage());   //存放错误信息
                            
                            //-----------------------------导入记录日志-------------------------------
                            LoginWindow.logger.warn("导入记录失败 : " + producedProcedure.toString() + " " + produceCardManager.getErrorMessage());
                            //-----------------------------导入记录日志-------------------------------
                        }
                        currentLine++;
                    }
                    
                    //-----------------------------------完成条数统计日志---------------------------------------------
                    LoginWindow.logger.info("本次导入文件任务 : " + "完成条数(" + successNum+"/" + currentLine + ")\n\n");
                    //-----------------------------------完成条数统计日志---------------------------------------------
                    
                    Thread.sleep(100);
                    if(errorLog.isEmpty() && currentLine==successNum) {    //导入成功
                        
                         //-----------------------------导入文件日志-------------------------------
                        LoginWindow.logger.info("导入文件成功");
                        //-----------------------------导入文件日志-------------------------------
                        
                        Util.showMessageDialog(ImportDataDialog.this,"导入成功！"); 
                    } else {
                        StringBuffer sb = new StringBuffer();
                        sb.append("完成条数(" + successNum+"/" + currentLine + ")\n\n");
                        for(int line : errorLog.keySet()) {
                            sb.append("错误 : (行数:" + line + ",信息:" + errorLog.get(line)+")\n");
                        }
                        Util.showScrollMessageDialogWithTitle(ImportDataDialog.this, "警告",sb.toString());
                    }
                } catch(Exception e) {
                    //-----------------------------导入文件日志-------------------------------
                    LoginWindow.logger.info("导入文件失败 ,发生未知错误！" );
                    //-----------------------------导入文件日志-------------------------------
                    Util.showMessageDialog(ImportDataDialog.this, "导入失败，发生未知错误！");
                } finally {
                    if(rwb!=null) {
                        rwb.close();
                    }
                }
            }
          
        }
       
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportDataDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportDataDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportDataDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportDataDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ImportDataDialog dialog = new ImportDataDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JButton importButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables
}
