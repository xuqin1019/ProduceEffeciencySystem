/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jycykj.gui;

import com.jycykj.helper.Util;
import com.jycykj.managers.ProduceCardManager;
import com.jycykj.model.Component;
import com.jycykj.model.Procedure;
import com.jycykj.model.ProducedProcedure;
import com.jycykj.model.Worker;
import com.jycykj.tables.ComponentInfoTableModel;
import com.jycykj.tables.ComponentProcedureTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.CollationKey;
import java.text.Collator;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author lenovo
 */
public class ProduceCardPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProduceCardPanel
     */
    private ProduceCardManager produceCardManager = null;
    private ComponentInfoTableModel componentInfoTableModel = null;
    private ComponentProcedureTableModel componentProcedureTableModel = null;
    private TableRowSorter<TableModel> sorter = null;     //sorter，用于排序
    
    //String [] componentIds = null;     //used to show in the list
    
    boolean deleteRowButtonLastStatus = false;
    int deleteRowIndex = -1;
    
    private ProducedProcedure addedProducedProcedure = null;
    
    private ProduceCardDialog produceCardDialog = null;
    
    private boolean nothingAdded = true;
    
    public ProduceCardPanel(ProduceCardDialog produceCardDialog) {
        this.produceCardDialog = produceCardDialog;
        produceCardManager = ProduceCardManager.newInstance();
        
      //  int size = componentIdsString.size(); 
     //   componentIds = (String [])componentIdsString.toArray(new String[size]);       //calculate the list in the construction method to save time
        initComponents();
        
        this.timeLabel.setText(produceCardManager.getCurrentTime());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        componentLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        componentNameLabel = new javax.swing.JLabel();
        componentIdTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        batchIdTextField = new javax.swing.JTextField();
        filterTextField = new javax.swing.JTextField();
        filterButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        componentInfoTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        componentProcedureTable = new JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        addRowButton = new javax.swing.JButton();
        deleteRowButton = new javax.swing.JButton();

        headerPanel.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N

        headerLabel.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        headerLabel.setText("生产工艺流程卡");

        timeLabel.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        timeLabel.setText("2012 年 5 月 27 日");

        jLabel3.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel3.setText("零件名称：");

        jLabel4.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        jLabel4.setText("图号：");

        List<String> componentIdsString = produceCardManager.getComponentIds();
        Util.setupAutoComplete(componentIdTextField, componentIdsString);
        componentIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentIdTextFieldActionPerformed(evt);
            }
        });
        componentIdTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                componentIdTextFieldFocusLost(evt);
            }
        });

        jLabel2.setText("批次号：");

        batchIdTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                batchIdTextFieldFocusLost(evt);
            }
        });

        filterButton.setText("筛选");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(componentNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(componentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(componentIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(batchIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                        .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                        .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(filterButton)
                        .addContainerGap())))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPanelLayout.createSequentialGroup()
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(componentNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(timeLabel)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addComponent(componentIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(batchIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterButton))
                .addGap(354, 354, 354)
                .addComponent(componentLabel))
        );

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        componentInfoTableModel = new ComponentInfoTableModel(componentIdTextField.getText().trim());
        componentInfoTable.setModel(componentInfoTableModel);
        componentNameLabel.setText(componentInfoTableModel.getComponent().getName());
        jScrollPane1.setViewportView(componentInfoTable);

        jTabbedPane1.addTab("零件原材料", jScrollPane1);

        componentProcedureTable.setRowHeight(20);
        componentProcedureTableModel = new ComponentProcedureTableModel(componentIdTextField.getText().trim(),"");
        componentProcedureTable.setDefaultRenderer(Integer.class,new LeftAlignRenderer());
        componentProcedureTable.setModel(componentProcedureTableModel);
        //TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(componentProcedureTableModel);
        //componentProcedureTable.setRowSorter(sorter);

        componentProcedureTable.addMouseListener(new MyMouseAdapter());
        jScrollPane2.setViewportView(componentProcedureTable);

        jTabbedPane1.addTab("零件工序", jScrollPane2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        cancelButton.setText("取消");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("保存");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(184, 184, 184))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        addRowButton.setText("+");
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowButtonActionPerformed(evt);
            }
        });

        deleteRowButton.setText("-");
        deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addRowButton)
                        .addComponent(deleteRowButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        produceCardDialog.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    
        
   
    
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        if(jTabbedPane1.getSelectedIndex()==1) {
            if(nothingAdded) {
                addRowButton.setEnabled(true);
            }
            if(notSaved()) {
                System.out.println("notSaved()");
                addRowButton.setEnabled(false);
                saveButton.setEnabled(true);
            }
            if(deleteRowButtonLastStatus) {
                System.out.println("deleteRowButtonLastStatus==true");
                deleteRowButton.setEnabled(true);
            }
         
        } else {
            addRowButton.setEnabled(false);
            deleteRowButton.setEnabled(false);
            saveButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private boolean notSaved() {
        System.out.println("nothingAdded : " + nothingAdded + "    " + addedProducedProcedure!=null ? "not null" : "null");
        return nothingAdded==false && addedProducedProcedure!=null;
    }
    
    private void save() {
        addedProducedProcedure=null;
    }
    
    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        // TODO add your handling code here:
        if(batchIdTextField.getText().trim().length()==0) {
            Util.showMessageDialog(this,"请先在表格上面的文本框中输入批次号！");
            return;
        }
        
        Component component = new Component();
        component.setBatchName(batchIdTextField.getText().trim());
      
        addedProducedProcedure = new ProducedProcedure(component,new Procedure() ,new Worker());    // the new line added
       
        componentProcedureTableModel.getWorks().add(addedProducedProcedure);    //add one line to the table
        
        componentProcedureTableModel.fireTableRowsInserted(componentProcedureTableModel.getRowCount()-1, componentProcedureTableModel.getRowCount()-1);   //refresh
        
        List<String> procedureNames = produceCardManager.getProcedureNames(componentIdTextField.getText().trim());    //add procedure in combox
        List<String> workerNames = produceCardManager.getWorkerNames();
         
         
       
         renderColumnAsCombox(1,procedureNames,addedProducedProcedure);
      //   renderColumnAsCombox(3, workerNames,addedProducedProcedure);
         renderColumnAsTextField(3,workerNames,addedProducedProcedure);
         
         nothingAdded = false;
         
         addRowButton.setEnabled(false);          //add record one by one
         saveButton.setEnabled(true);
    }//GEN-LAST:event_addRowButtonActionPerformed
    void renderColumnAsTextField(int columnIndex , List<String> items, ProducedProcedure producedProcedure) {
         TableColumn col = componentProcedureTable.getColumnModel().getColumn(columnIndex);
         JTextField textField = new JTextField();
         Util.setupAutoComplete(textField, items);
         col.setCellEditor(new DefaultCellEditor(textField));
         
       //  col.setCellEditor();
    }
    
    
    void renderColumnAsCombox(int columnIndex , List<String> items,ProducedProcedure producedProcedure) {
        TableColumn col = componentProcedureTable.getColumnModel().getColumn(columnIndex);
        JComboBox comboBox = new JComboBox();
        for(String item : items) {
           comboBox.addItem(item);
        }
        comboBox.addActionListener(new MyComboxActionListener(columnIndex,comboBox,producedProcedure));
        col.setCellEditor(new DefaultCellEditor(comboBox));
    }
   
    
    class MyComboxActionListener implements ActionListener {  // listen for the select event of the combox
        private JComboBox jComboBox;
        private ProducedProcedure producedProcedure;
        private int columnIndex;
        
        public MyComboxActionListener(int columnIndex,JComboBox jComboBox , ProducedProcedure producedProcedure) {
            this.columnIndex = columnIndex;
            this.jComboBox = jComboBox;
            this.producedProcedure = producedProcedure;
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
              String selectedItem = (String)jComboBox.getSelectedItem();
              if(columnIndex == 1) {      //set the procedure
                 // Procedure procedure = new Procedure();
                  producedProcedure.getProcedure().setProcedureName(selectedItem);
                  producedProcedure.getProcedure().setFactor(produceCardManager.getProcedureFactor(selectedItem));   //automately update the factor
               //   procedure.setProcedureName(selectedItem);
                //  procedure.setFactor(produceCardManager.getProcedureFactor(selectedItem));
                //  producedProcedure.setProcedure(procedure);
                  
                  componentProcedureTableModel.fireTableDataChanged();
              } else if(columnIndex == 3) {    //set the operator
                 // Worker worker = new Worker();
                 // worker.setWorkerName(selectedItem);
                  producedProcedure.getOperator().setWorkerName(selectedItem);
                 // producedProcedure.setOperator(worker);
                  componentProcedureTableModel.fireTableDataChanged();
              }
        }
        
    }
    
    private void deleteRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowButtonActionPerformed
        // TODO add your handling code here:
        
        int choice = JOptionPane.showConfirmDialog(this,"你确定要删除此条记录吗","警告",JOptionPane.WARNING_MESSAGE);
        
        if(choice==JOptionPane.YES_OPTION) {
            System.out.println(deleteRowIndex);
            
            if(!notSaved()) { 
                //produceCardManager.deleteProduceWork()
                //System.out.println("delete one row from db");
                componentProcedureTableModel.getWorks().get(deleteRowIndex).getComponent().setComponentId(componentIdTextField.getText().trim());
                if(!produceCardManager.deleteProduceWork(componentProcedureTableModel.getWorks().get(deleteRowIndex))) {
                    Util.showMessageDialog(this, "删除记录出错，请联系开发人员！！");
                    return;
                } else {
                    Util.showMessageDialog(this, "删除记录成功！！");
                }
            }
            componentProcedureTableModel.getWorks().remove(deleteRowIndex);
            componentProcedureTableModel.fireTableRowsDeleted(deleteRowIndex, deleteRowIndex);
            addRowButton.setEnabled(true);
            deleteRowButton.setEnabled(false);
            
            nothingAdded = true;
            deleteRowButtonLastStatus = false;
            saveButton.setEnabled(false);
        }
    }//GEN-LAST:event_deleteRowButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        
        Util.Error e = Util.valid(addedProducedProcedure);
        if(e==Util.Error.BatchNameError) {
            Util.showMessageDialog(this, "输入批次号有误，请重新输入");
            return;
        } else if(e==Util.Error.ProcedureNameError) {
             Util.showMessageDialog(this, "输入工序有误，请重新输入");
            return;
        } else if(e==Util.Error.FactorError) {
             Util.showMessageDialog(this, "输入系数有误，请重新输入");
            return;
        }else if(e==Util.Error.WorkerNameError) {
             Util.showMessageDialog(this, "输入操作工有误，请重新输入");
            return;
        }else if(e==Util.Error.PassedNumError) {
             Util.showMessageDialog(this, "输入合格数有误，请重新输入");
            return;
        }else if(e==Util.Error.FailedNumError) {
             Util.showMessageDialog(this, "输入报废数有误，请重新输入");
            return;
        }else if(e==Util.Error.DateError) {
             Util.showMessageDialog(this, "输入时间有误，请重新输入");
            return;
        } else {
            addedProducedProcedure.getComponent().setComponentId(componentIdTextField.getText().trim());
            if(produceCardManager.putProducedProcedure(addedProducedProcedure)) {
                Util.showMessageDialog(this, "录入数据成功!!");
            } else {
                Util.showMessageDialog(this,produceCardManager.getErrorMessage());
                return;
            }
            addedProducedProcedure=null;
            addRowButton.setEnabled(true);
            saveButton.setEnabled(false);
        }
        save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void componentIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentIdTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_componentIdTextFieldActionPerformed

    private void componentIdTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_componentIdTextFieldFocusLost
        // TODO add your handling code here:
        System.out.println("Component Text Field lose focus");
        componentInfoTableModel = new ComponentInfoTableModel(componentIdTextField.getText().trim());
        componentInfoTable.setModel(componentInfoTableModel);
        componentNameLabel.setText(componentInfoTableModel.getComponent().getName());
        
        //根据component和batch填充componentProcedure表格
        String batchName = batchIdTextField.getText().trim().length()==0 ? "" : batchIdTextField.getText().trim(); 
        componentProcedureTableModel = new ComponentProcedureTableModel(componentIdTextField.getText().trim(),batchName);
        componentProcedureTable.setModel(componentProcedureTableModel);
        
        setSorter(componentProcedureTableModel, componentProcedureTable);   //使得表格可以排序

        //component的TextField的lostFocus时间触发BatchId TextField的内容填充
        List<String> batchIdsString = produceCardManager.getComponentBatchIds(componentIdTextField.getText().trim());
        Util.setupAutoComplete(batchIdTextField, batchIdsString);
    }//GEN-LAST:event_componentIdTextFieldFocusLost

    private void batchIdTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_batchIdTextFieldFocusLost
        // TODO add your handling code here:
        System.out.println("BatchId Text Field lose focus");
        
        if(componentIdTextField.getText().trim().length()==0) {  //componentIdTextField为空
            Util.showMessageDialog(this, "请先输入图号");
           // Util.showConfirmDialog(this, "请先输入图号");
            return;
        }
        
        componentProcedureTableModel = new ComponentProcedureTableModel(componentIdTextField.getText().trim(),batchIdTextField.getText().trim());
        componentProcedureTable.setModel(componentProcedureTableModel);
        
        setSorter(componentProcedureTableModel, componentProcedureTable);     //使得表格可以排序

        if(jTabbedPane1.getSelectedIndex()==1) {
            addRowButton.setEnabled(true);
        }
    }//GEN-LAST:event_batchIdTextFieldFocusLost

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        // TODO add your handling code here:
        
        setSorter(componentProcedureTableModel, componentProcedureTable);
        String text = filterTextField.getText();
        if (text.length() == 0) {
          //sorter.setRowFilter(null);
            Util.showMessageDialog(this, "请输入筛选条件");
        } else {
            //调用方法实现过滤内容
          sorter.setRowFilter(RowFilter.regexFilter(text));
        }
      
    }//GEN-LAST:event_filterButtonActionPerformed
    
    private void setSorter(ComponentProcedureTableModel model,JTable table) {
          //对表格进行排序
        sorter = new TableRowSorter<TableModel>(componentProcedureTableModel);
        sorter.setComparator(2,new Comparator<Float>() {      //第二列是数据类型是Float,但表格单元的属性是String,不一致，所以得自定义一个比较函数
            @Override
            public int compare(Float o1, Float o2) {
                return o1.compareTo(o2);
            }
        });
        table.setRowSorter(sorter);
    }
    
     private class MyMouseAdapter extends MouseAdapter {      //listen for the componentProcedureTable click event 
        public void mousePressed(MouseEvent e) {  
            if (componentProcedureTable.equals(e.getSource())) {  
                deleteRowIndex = componentProcedureTable.rowAtPoint(e.getPoint());  
                deleteRowButton.setEnabled(true);
                deleteRowButtonLastStatus = true;
            }  
        }  
    } 
     
     
    /*
     class MyTable extends JTable implements TableCellRenderer {
		// this method tell the JTable drawer that it has to call me back to provide
		// the JComponent that will be used to draw the cell
		public TableCellRenderer getCellRenderer(int row, int col) {
			// Call me back for all rows/columns
			return this;
		}

        @Override
        public java.awt.Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return (java.awt.Component)value;
        }
     }
    */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JTextField batchIdTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField componentIdTextField;
    private javax.swing.JTable componentInfoTable;
    private javax.swing.JLabel componentLabel;
    private javax.swing.JLabel componentNameLabel;
    private javax.swing.JTable componentProcedureTable;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JButton filterButton;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
}
